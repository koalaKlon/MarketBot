import os
import gspread
import hashlib

from typing import Union
from dotenv import load_dotenv
from aiogram import types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

load_dotenv()

gc = gspread.service_account(filename=os.getenv("FILENAME"))
worksheet = gc.open_by_key(os.getenv("GSHEET_KEY")).get_worksheet(0)

columns_list = worksheet.col_values(9)[1:]
unique_columns_list = list(set(columns_list))

shops_list = worksheet.col_values(1)[1:]
unique_shops = list(set(shops_list))


async def main_menu(msg):
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data=f"button_–º–∞–≥–∞–∑–∏–Ω—ã")
    for i in unique_columns_list:
        builder.button(text=f"{i}", callback_data=f"{i}")
    builder.button(text="–¢–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –ü—Ä–æ–º–æ–∫–æ–¥–∞–º–∏!",
                   url="https://docs.google.com/spreadsheets/d/1FhYGE5IODqbtXSfQGBs0BGUaUJYAWBGAC2SRWqYzf6M/edit#gid=0")
    builder.adjust(1)
    try:
        await msg.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É‚¨áÔ∏è", reply_markup=builder.as_markup())
    except:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É‚¨áÔ∏è", reply_markup=builder.as_markup())


async def button_shop(query: Union[Message, types.CallbackQuery]):
    try:
        builder = InlineKeyboardBuilder()
        for shop in unique_shops:
            callback_data = f"{shop}"
            if len(callback_data.encode('utf-8')) <= 64:
                builder.button(text=f"{shop}", callback_data=callback_data)
            else:
                short_shop_name = shop[:10]
                unique_id = generate_unique_id(shop)
                callback_data = f"{short_shop_name}_{unique_id}"
                builder.button(text=f"{shop}", callback_data=callback_data)
        builder.adjust(3)
        builder.button(text="–í –º–µ–Ω—é", callback_data="menu")
        await query.message.edit_text("–í—ã–±–∏—Ä–∞–π—Ç–µü•∞", reply_markup=builder.as_markup())
    except:
        await query.answer("–í—ã–±–∏—Ä–∞–π—Ç–µü•∞", reply_markup=builder.as_markup())


async def handle_shop(query: types.CallbackQuery, shop_name):
    builder = InlineKeyboardBuilder()
    for discount in shop_to_discounts[shop_name]:
        callback_data = f"{discount}"
        if len(callback_data.encode('utf-8')) <= 64:
            builder.button(text=f"{discount}", callback_data=callback_data)
        else:
            short_discount_name = discount[:10]
            unique_id = generate_unique_id(discount)
            callback_data = f"{short_discount_name}_{unique_id}"
            builder.button(text=f"{discount}", callback_data=callback_data)
    builder.button(text="–í –º–µ–Ω—é", callback_data="menu")
    builder.adjust(1)
    try:
        await query.message.edit_text(text=f"–í—ã–±–∏—Äa–π—Ç–µü•∞", reply_markup=builder.as_markup())
    except Exception as e:
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –º–µ–Ω—é", callback_data="menu")
        builder.button(text="–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", url="https://t.me/skidkinezagorami")
        builder.adjust(1)
        print(f"Exception occurred: {e}")
        await query.message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                   reply_markup=builder.as_markup())


async def handle_category(query: types.CallbackQuery, category):
    builder = InlineKeyboardBuilder()
    for shop in category_to_shops[category]:
        builder.button(text=f"{shop}", callback_data=f"{shop}")
    builder.button(text="–í –º–µ–Ω—é", callback_data="menu")
    builder.adjust(1)
    await query.message.edit_text(f"–í—ã–±–∏—Ä–∞–π—Ç–µü•∞", reply_markup=builder.as_markup())


async def handle_discount(query: types.CallbackQuery, shop_name, discount):
    builder = InlineKeyboardBuilder()
    for info in discount_info[shop_name]:
        if info[1] == discount:
            promo, discount, link, valid_until, region, conditions = info
            break
    builder.button(text="–í –º–µ–Ω—é", callback_data="menu")
    builder.button(text="–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", url="https://t.me/skidkinezagorami")
    builder.adjust(1)
    await query.message.answer(f"–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–∫—Ü–∏–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: {conditions}")
    await query.message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {shop_name}\n–°–∫–∏–¥–∫–∞: {discount}\n–°—Å—ã–ª–∫–∞: {link}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_until}\n–†–µ–≥–∏–æ–Ω: {region}\n–£—Å–ª–æ–≤–∏—è: {conditions}\n–ü—Ä–æ–º–æ–∫–æ–¥: {promo}")
    await query.message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏ –¥–∞–ª—å—à–µ?", reply_markup=builder.as_markup())


def generate_unique_id(shop):
    return hashlib.md5(shop.encode()).hexdigest()[:8]


category_button = KeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
market_button = KeyboardButton(text='–ú–∞–≥–∞–∑–∏–Ω—ã')
menu = ReplyKeyboardMarkup(keyboard=[[category_button, market_button]], resize_keyboard=True)


discount_info = {}
for row in worksheet.get_all_values()[1:]:
    shop, promo, discount, link, valid_until, region, conditions = row[0], row[2], row[3], row[4], row[5], row[6], row[7]
    if shop not in discount_info:
        discount_info[shop] = []
    discount_info[shop].append((promo, discount, link, valid_until, region, conditions))


category_to_shops = {}
for category, shop in zip(worksheet.col_values(9)[1:], worksheet.col_values(1)[1:]):
    if category not in category_to_shops:
        category_to_shops[category] = []
    if shop not in category_to_shops[category]:
        category_to_shops[category].append(shop)


shop_to_discounts = {}
for shop, discount in zip(worksheet.col_values(1)[1:], worksheet.col_values(4)[1:]):
    if shop not in shop_to_discounts:
        shop_to_discounts[shop] = []
    if discount not in shop_to_discounts[shop]:
        shop_to_discounts[shop].append(discount)






